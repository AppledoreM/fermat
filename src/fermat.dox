/*
 * Fermat
 * Copyright (c) 2011-2018, NVIDIA CORPORATION. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the NVIDIA CORPORATION nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//\page fermat_page Fermat

/// \mainpage Fermat
///
///\htmlonly
/// <img src="escher_room.png" style="position:relative; bottom:-10px; border:0px;"/>
///\endhtmlonly
///
///\par
///\n
/// <a href="https://github.com/NVlabs/fermat">Fermat</a>, is a high performance research oriented physically based rendering system,
/// trying to produce beautiful pictures following the mathematician&apos;s principle of least time.
///\n
/// It is a CUDA physically based research renderer designed and developed by Jacopo Pantaleoni at NVIDIA.
/// Its purpose is mostly educational: it is primarily intended to teach how to write rendering algorithms,
/// ranging from simple forward path tracing, to bidirectional path tracing, to Metropolis light transport with many
/// of its variants, and do so on massively parallel hardware.
///\n
/// The choice of CUDA C++ has been made for various reasons: the first was to allow the highest level of expression and
/// flexibility in terms of programmability (for example, with template based meta-programming); the second was perhaps
/// historical: when Fermat's development was started, other ray tracing platforms like Microsoft DXR did not exist yet.
/// The ray tracing core employed by Fermat is OptiX Prime - though it is highly likely that future versions will switch
/// to OptiX, or even offer a DXR backend.
///\n
/// Fermat is built on top of another library co-developed for this project: \ref cugar_page - CUDA Graphics AcceleratoR.
/// This is a template library of low-level graphics tools, including algorithms for BVH, Kd-tree and octree construction,
/// sphericals harmonics, sampling, and so on and so on.
/// While packaged together, CUGAR can be thought of as a separate educational project by itself.
/// More information can be found in the relevant Doxygen documentation.
///
/// \section FermatIntroductionSection Introduction
///\par
/// At the highest level, Fermat is basically a collection of separate renderers.
/// All renderers use Optix Prime as a ray tracing backend, and implement recursive ray / path tracing as an iterative
/// process, in which rays representing new path segments are spawned in <i>wavefronts</i>.
/// This means each renderer is pretty much written like a pipeline of interleaved <i>tracing</i> and <i>shading</i> stages
/// communicating through global memory queues.
///\n
/// Currently, the list of available renderers include:
///\n
/// - PathTracer (<i>PT</i>): a simple forward path tracer with next-event estimation
/// - BPT: a bidirectional path tracer
/// - PSSMLT: a primary sample space Metropolis sampler, inspired by the seminal paper:
///   <a href="https://onlinelibrary.wiley.com/doi/pdf/10.1111/1467-8659.t01-1-00703">A Simple and Robust Mutation Strategy for the Metropolis Light Transport Algorithm</a>,
///   Kelemen et al, Computer Graphics Forum, Volume21, Issue3, September 2002 - Pages 531-540
/// - CMLT: a Charted Metropolis light transport sampler, as described in:
///   <a href="https://arxiv.org/abs/1612.05395">Charted Metropolis Light Transport</a>, Jacopo Pantaleoni, ACM Transactions on Graphics, Volume 36 Issue 4, July 2017.
/// - RPT: a reuse-based path tracer inspired by the paper:
///   <a href="https://www.researchgate.net/publication/220853005_Accelerating_Path_Tracing_by_Re-Using_Paths">Accelerating path tracing by re-using path</a>, by Bekaert et al
///   EGRW '02 Proceedings of the 13th Eurographics workshop on Rendering
///   Pages 125-134
///\par
/// All renderers are implemented on top of a single virtual interface, namely the RendererInterface.
/// Among the various methods this class must implement (e.g. for self initialization, registering auxiliary frame-buffer channels, handling mouse and keyboard events, etc),
/// it must implement the \ref RendererInterfaceRenderMethod "void RendererInterface::render(const uint32 instance, Renderer& renderer)" method, which takes a frame <i>instance</i> number, useful for progressive rendering, and a reference to a Renderer object:
/// the latter encodes all the information belonging to the current rendering context, including the scene mesh, the output frame-buffer, and so on and so on.
///\n
/// Finally, all bidirectional renderers are based on a common, template-based library for bidirectional path tracing, described in the \ref BPTLib module.
///
/// \section FermatModulesSection Modules
///\par
/// Fermat includes the following modules:
///\n
/// - \ref BSDFModule
/// - \ref VertexGeometryModule
/// - \ref PathModule
/// - \ref BPTLib
/// - \ref LightsModule
/// - \ref FramebufferModule
/// - \ref SamplingModule
/// - \ref FilteringModule
/// - \ref PTModule
/// - \ref BPTModule
/// - \ref PSSMLTModule
/// - \ref CMLTModule
/// - \ref RPTModule
///
/// \section FermatDependenciesSection Dependencies
///\par
/// Fermat depends on the following external libraries:
///\n
/// - <a href="http://nvlabs.github.io/cub/">CUB</a> : contained in the package
/// - a modification of Nathaniel McClatchey's <a href="https://github.com/nmcclatchey/Priority-Deque/">priority_deque</a> : contained in the package
/// - <a href="http://freeglut.sourceforge.net/">FreeGLUT</a> : contained in the package
/// - <a href="https://developer.nvidia.com/cuda-80-ga2-download-archive">CUDA 8.0</a> : <b>not contained</b> - it should be separately downloaded and installed on the system
/// - <a href="https://developer.nvidia.com/optix">NVIDIA OptiX 4.0.1</a> : <b>not contained</b> - it should be separately downloaded and copied in the folder <i>contrib/OptiX</i>
///
/// \section Licensing
///\par
/// Fermat has been developed by <a href="www.nvidia.com">NVIDIA Corporation</a> and is licensed under BSD.
///
/// \section Contributors
///\par
/// <a href="https://github.com/NVlabs/fermat">Fermat</a> is made and mantained by <a href="jpantaleoni@nvidia.com">Jacopo Pantaleoni</a>.
///
/// \section DownloadSection Download
///\par
/// You can download Fermat from GitHub at:
///\n
/// <a href="https://github.com/NVlabs/fermat">https://github.com/NVlabs/fermat</a>
///\n
/// or directly clone the repository with the command:
///\n
/// git clone https://github.com/NVlabs/fermat.io
///
///\htmlonly
/// <a href="http://nvidia.com"><img src="nvidia.png" style="position:relative; bottom:-10px; border:0px;"/></a>
/// &nbsp;&nbsp;
///\endhtmlonly

/// Top: \ref mainpage
